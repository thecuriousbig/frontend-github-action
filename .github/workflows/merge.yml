name: merge

on:
  workflow_call:

  # 1. Check if the latest tested commit is same as current commit
  # 2. Check if this pull request is mergeable
  # If it is not mergeable then what the problem?
  #   a. github checks not passed
  #   b. conflicts
  # If this pull request is blocked because of 1. or 2.a then abort the workflow (remove ready_to_merge label and do nothing)
  # If there is conflicts then
  #   1. reset the head branch to the point where is not conflicts (earliest tag after main?)
  #   2. rebase the hotfix that cause conflicts to branch
  #   3. reopened the merged pull request

jobs:
  validate-latest-tested-commit:
    name: validate latest tested commit
    runs-on: ubuntu-latest
    steps:
      - name: find test passed commit
        id: find-comment
        uses: peter-evans/find-comment@v2
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: github-actions[bot]
          body-includes: '**passed**'
          direction: last
      - name: get commit sha
        id: sha
        run: |
          line="${{ steps.find-comment.outputs.comment-body }}"
          (echo "$line" | grep -Eq "${{ github.event.pull_request.head.sha }}" && match=true || match=false)
          echo $match
          echo "::set-output name=match::$match"
      - name: add comment if sha unmatch
        uses: peter-evans/create-or-update-comment@v2
        if: steps.sha.outputs.match == 'false'
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: "Merge failed: Please run test on latest commit before merge"
          reactions: -1, eyes
      - name: remove ready-to-merge label
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          labels: ready to merge
      - name: cancel workflow if fail
        if: steps.sha.outputs.match == 'false'
        run: exit 1
  
  validate-github-checks:
    name: validate github checks
    needs: validate-latest-tested-commit
    runs-on: ubuntu-latest
    steps:
      - name: get satus checks
        id: status-checks
        uses: octokit/graphql-action@v2.x
        with:
          query: |
            query getPRChecks($owner: String!, $repo: String!, $prnumber: Int!) {
              repository(owner: $owner, name: $repo) {
                pullRequest(number: $prnumber) {
                  baseRef {
                    refUpdateRule {
                      requiredStatusCheckContexts
                    }
                  }
                }
              }
            }
          owner: '${{ github.event.repository.owner.login }}'
          repo: '${{ github.event.repository.name }}'
          prnumber: '${{ github.event.pull_request.number }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo '${{ fromJSON(steps.status-checks.outputs.data) }}'
        
